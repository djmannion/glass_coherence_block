#! /usr/bin/python2 -O
# ^ want to run it with optimisations turned on

"""Parses the command-line input and executes multiple runs of the Glass coherence
block design fMRI experiment.
"""

import sys, os
import argparse

import numpy as np

import glass_coherence_block.exp

desc = "Executes the Glass coherence block design fMRI experiment"

eg = """
Example usage:
  run subject s1021 through all runs:
    glass_coherence_block_exp s1021

  run subject s1021 through runs 3 to the end
    glass_coherence_block_exp s1021 --start=3

  run subject s1021 only on run 2
    glass_coherence_block_exp s1021 --start=1 --end=1

---N.B.---

* The script must be run from the glass_coherence_block/bin directory.

"""

target_dir = "glass_coherence_block/bin"

current_dir = os.getcwd()

if current_dir[ -len( target_dir ): ] != target_dir:
	raise IOError( "Script needs to be launched from %s" % target_dir )


# use this formatter so we can supply our own indentation
fmt = argparse.RawDescriptionHelpFormatter

parser = argparse.ArgumentParser( description = desc,
                                  epilog = eg,
                                  formatter_class = fmt,
                                )

parser.add_argument( "subj_id",
                     help = "Subject identifier"
                   )

parser.add_argument( "--start",
                     type = int,
                     help = "Start run",
                     default = 1
                   )

parser.add_argument( "--end",
                     help = "End run",
                     type = int,
                     default = len( run_info )
                   )

args = parser.parse_args()

# check the arguments are valid
if len( args.subj_id ) != 5 or args.subj_id[ 0 ] != "s":
	raise ValueError( "Subject ID needs to be in the format of sXXXX" )

for i_run in np.arange( args.start - 1, args.end ):

	print "Executing: glass_coherence_block.exp.run( %s, %d, %s )" % (
	      args.subj_id, i_run + 1 )

	exit_status = glass_coherence_block.exp.run( args.subj_id,
                                               i_run + 1
                                             )

	if exit_status == 1:
		print "Aborting sequence"
		sys.exit( exit_status )
