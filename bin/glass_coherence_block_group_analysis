#! /usr/bin/env python2

"""Runs a group analysis step in the Glass coherence block fMRI
experiment"""

import argparse
import logging
import sys

import glass_coherence_block.config, glass_coherence_block.analysis.paths
import glass_coherence_block.analysis.preproc
import glass_coherence_block.analysis.group_analysis

def main():
	"""Execution function"""

	desc = """Runs a group analysis step in the Glass coherence block
	          fMRI experiment"""

	eg = """
	Example usage:
	  run the task analysis:
	    glass_coherence_block_group_analysis task
	
	"""

	# use this formatter so we can supply our own indentation
	fmt = argparse.RawDescriptionHelpFormatter

	parser = argparse.ArgumentParser( description = desc,
	                                  epilog = eg,
	                                  formatter_class = fmt,
	                                )

	proc_steps = ( "task",
	               "roi_prep",
	               "roi_perm",
	               "roi_stat",
	               "vf_v3_prep",
	               "vf_v3_perm",
	               "vf_v3_stat"
	             )

	parser.add_argument( "proc_step",
	                     choices = proc_steps,
	                     help = "Processing step"
	                   )

	args = parser.parse_args()

	# load the experiment / subject info
	conf = glass_coherence_block.config.get_conf()
	paths = glass_coherence_block.analysis.paths.get_group_paths( conf )

	logger = logging.getLogger()
	logger.setLevel( logging.INFO )

	log_fmt = logging.Formatter( "%(name)s, %(asctime)s, (%(levelname)s)\n-----\n%(message)s\n" )

	file_log = logging.FileHandler( paths.log.full() )
	file_log.setFormatter( log_fmt )

	logger.addHandler( file_log )

	scr_log = logging.StreamHandler( sys.stdout )
	scr_log.setLevel( logging.INFO )
	scr_log.setFormatter( log_fmt )

	logger.addHandler( scr_log )

	if args.proc_step == "task":
		glass_coherence_block.analysis.group_analysis.task_anova( conf, paths )

	elif args.proc_step == "roi_prep":
		glass_coherence_block.analysis.group_analysis.roi_prep( conf, paths )

	elif args.proc_step == "roi_perm":
		glass_coherence_block.analysis.group_analysis.roi_perm( conf, paths )

	elif args.proc_step == "roi_stat":
		glass_coherence_block.analysis.group_analysis.roi_stat( conf, paths )

	elif args.proc_step == "vf_v3_prep":
		glass_coherence_block.analysis.group_analysis.vf_v3_prep( conf, paths )

	elif args.proc_step == "vf_v3_perm":
		glass_coherence_block.analysis.group_analysis.vf_v3_perm( conf, paths )

	elif args.proc_step == "vf_v3_stat":
		glass_coherence_block.analysis.group_analysis.vf_v3_stat( conf, paths )

	else:
		print "Not implemented"


if __name__ == "__main__":
	main()
