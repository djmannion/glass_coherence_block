#! /usr/bin/env python

"""Runs a processing step for a subject in the Glass coherence block fMRI
experiment"""

import os
import argparse

import glass_coherence_block.config, glass_coherence_block.analysis.paths
import glass_coherence_block.analysis.preproc
import glass_coherence_block.analysis.analysis

def main():
	"""Execution function"""

	desc = """Runs a processing step for a subject in the Glass coherence block
	          fMRI experiment"""

	eg = """
	Example usage:
	  run motion correction on subject s1000:
	    glass_coherence_proc s1000 correct
	
	Steps:
	  convert : converts the scanner DICOM images to NIFTIs.
	  correct : performs slice-timing and motion correction.
	  fieldmap : prepares the fieldmaps.
	  undistort : applies distortion correction to the functional data.
	  trim : remove portions of each run's timecourse.
	  surf_reg : register to the canonical anatomy.
	  vol_to_surf : project the volumes onto the cortical surface.
	  design_prep : prepares design specs for future GLM analysis
	
	---N.B.---
	
	* The script must be run from the glass_coherence_block/bin directory.
	
	"""

	target_dir = "glass_coherence_block/bin"

	current_dir = os.getcwd()

	if current_dir[ -len( target_dir ): ] != target_dir:
		raise IOError( "Script needs to be launched from %s" % target_dir )

	# use this formatter so we can supply our own indentation
	fmt = argparse.RawDescriptionHelpFormatter

	parser = argparse.ArgumentParser( description = desc,
	                                  epilog = eg,
	                                  formatter_class = fmt,
	                                )

	parser.add_argument( "subj_id",
	                     help = "Subject identifier"
	                   )

	preproc_steps = ( "convert",
	                  "correct",
	                  "fieldmap",
	                  "undistort",
	                  "trim",
	                  "surf_reg",
	                  "vol_to_surf",
	                  "surf_smooth",
	                  "design_prep",
	                  "exp_glm",
	                  "loc_mask",
	                  "beta_to_psc",
	                  "roi_xtr",
	                  "raw_adj"
	                )

	parser.add_argument( "preproc_step",
	                     choices = preproc_steps,
	                     help = "Preprocessing step"
	                   )

	args = parser.parse_args()

	# check the arguments are valid
	if len( args.subj_id ) != 5 or args.subj_id[ 0 ] != "s":
		raise ValueError( "Subject ID needs to be in the format of sXXXX" )

	# load the experiment / subject info
	conf = glass_coherence_block.config.get_conf( args.subj_id )
	paths = glass_coherence_block.analysis.paths.get_subj_paths( conf )

	if args.preproc_step == "convert":
		glass_coherence_block.analysis.preproc.convert( paths, conf )

	elif args.preproc_step == "correct":
		glass_coherence_block.analysis.preproc.st_motion_correct( paths, conf )

	elif args.preproc_step == "fieldmap":
		glass_coherence_block.analysis.preproc.fieldmaps( paths, conf )

	elif args.preproc_step == "undistort":
		glass_coherence_block.analysis.preproc.unwarp( paths, conf )

	elif args.preproc_step == "trim":
		glass_coherence_block.analysis.preproc.trim( paths, conf )

	elif args.preproc_step == "surf_reg":
		glass_coherence_block.analysis.preproc.surf_reg( paths, conf )

	elif args.preproc_step == "vol_to_surf":
		glass_coherence_block.analysis.preproc.vol_to_surf( paths, conf )

	elif args.preproc_step == "surf_smooth":
		glass_coherence_block.analysis.preproc.surf_smooth( paths, conf )

	elif args.preproc_step == "design_prep":
		glass_coherence_block.analysis.preproc.design_prep( paths, conf )

	elif args.preproc_step == "loc_glm":
		glass_coherence_block.analysis.analysis.loc_glm( paths, conf )

	elif args.preproc_step == "exp_glm":
		glass_coherence_block.analysis.analysis.exp_glm( paths, conf )

	elif args.preproc_step == "loc_mask":
		glass_coherence_block.analysis.analysis.loc_mask( paths, conf )

	elif args.preproc_step == "trends":
		glass_coherence_block.analysis.analysis.trends( paths, conf )

	elif args.preproc_step == "beta_to_psc":
		glass_coherence_block.analysis.analysis.beta_to_psc( paths, conf )

	elif args.preproc_step == "roi_xtr":
		glass_coherence_block.analysis.analysis.roi_xtr( paths, conf )

	elif args.preproc_step == "raw_adj":
		glass_coherence_block.analysis.analysis.raw_adj( paths, conf )

	else:
		print "Not completed"


if __name__ == "__main__":
	main()
